import type Token from 'markdown-it/lib/token.js';
import type { GenericNode } from 'myst-common';
import type { Text } from 'myst-spec';
import type { TokenHandlerSpec } from './types.js';
export declare function withoutTrailingNewline(str: string): string;
/** MarkdownParseState tracks the context of a running token stream.
 *
 * Loosely based on prosemirror-markdown
 */
export declare class MarkdownParseState {
    stack: GenericNode[];
    handlers: Record<string, TokenHandler>;
    constructor(handlers: Record<string, TokenHandlerSpec>);
    top(): GenericNode;
    addNode(node?: GenericNode): GenericNode | undefined;
    addText(text: string, token: Token, type?: string, attrs?: Record<string, any>): GenericNode<Record<string, any>> | Text | undefined;
    openNode(type: string, token: Token, attrs: Record<string, any>, isLeaf?: boolean): void;
    closeNode(): GenericNode | undefined;
    parseTokens(tokens?: Token[] | null): void;
    _lastPosition: GenericNode['position'];
    addPositionsToNode(node: GenericNode, token: Token): void;
}
type TokenHandler = (state: MarkdownParseState, token: Token, tokens: Token[], index: number) => void;
export {};
//# sourceMappingURL=fromMarkdown.d.ts.map