import { fillMissingKeys, incrementOptions, validationWarning } from 'simple-validators';
import { fillNumbering } from '../numbering/validators.js';
import { USE_PROJECT_FALLBACK } from '../page/validators.js';
import { normalizeJsonToString } from './normalizeString.js';
import { isStashPlaceholder, stashPlaceholder } from './referenceStash.js';
/**
 * Fill missing values from page frontmatter object with values from project frontmatter
 *
 * This only applies to frontmatter values where overriding is the correct behavior.
 * For example, if page has no 'title' the project 'title' is not filled in.
 */
export function fillPageFrontmatter(pageFrontmatter, projectFrontmatter, opts) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    const frontmatter = fillMissingKeys(pageFrontmatter, projectFrontmatter, USE_PROJECT_FALLBACK);
    if (pageFrontmatter.numbering || projectFrontmatter.numbering) {
        frontmatter.numbering = fillNumbering(pageFrontmatter.numbering, projectFrontmatter.numbering);
    }
    // Combine all math macros defined on page and project
    if (projectFrontmatter.math || pageFrontmatter.math) {
        frontmatter.math = { ...((_a = projectFrontmatter.math) !== null && _a !== void 0 ? _a : {}), ...((_b = pageFrontmatter.math) !== null && _b !== void 0 ? _b : {}) };
    }
    // Combine all abbreviation defined on page and project
    if (projectFrontmatter.abbreviations || pageFrontmatter.abbreviations) {
        frontmatter.abbreviations = {
            ...((_c = projectFrontmatter.abbreviations) !== null && _c !== void 0 ? _c : {}),
            ...((_d = pageFrontmatter.abbreviations) !== null && _d !== void 0 ? _d : {}),
        };
    }
    // Combine all options defined on page and project
    if (projectFrontmatter.options || pageFrontmatter.options) {
        frontmatter.options = {
            ...((_e = projectFrontmatter.options) !== null && _e !== void 0 ? _e : {}),
            ...((_f = pageFrontmatter.options) !== null && _f !== void 0 ? _f : {}),
        };
    }
    // Combine all settings defined on page and project
    if (projectFrontmatter.settings || pageFrontmatter.settings) {
        frontmatter.settings = {
            ...((_g = projectFrontmatter.settings) !== null && _g !== void 0 ? _g : {}),
            ...((_h = pageFrontmatter.settings) !== null && _h !== void 0 ? _h : {}),
        };
    }
    // Gather all contributors and affiliations from funding sources
    const contributorIds = new Set();
    const affiliationIds = new Set();
    (_j = frontmatter.funding) === null || _j === void 0 ? void 0 : _j.forEach((fund) => {
        var _a;
        (_a = fund.awards) === null || _a === void 0 ? void 0 : _a.forEach((award) => {
            var _a, _b, _c;
            (_a = award.investigators) === null || _a === void 0 ? void 0 : _a.forEach((inv) => {
                contributorIds.add(inv);
            });
            (_b = award.recipients) === null || _b === void 0 ? void 0 : _b.forEach((rec) => {
                contributorIds.add(rec);
            });
            (_c = award.sources) === null || _c === void 0 ? void 0 : _c.forEach((aff) => {
                affiliationIds.add(aff);
            });
        });
    });
    if (((_k = frontmatter.authors) === null || _k === void 0 ? void 0 : _k.length) || contributorIds.size) {
        // Gather all people from page/project authors/contributors
        const people = [
            ...((_l = pageFrontmatter.authors) !== null && _l !== void 0 ? _l : []),
            ...((_m = projectFrontmatter.authors) !== null && _m !== void 0 ? _m : []),
            ...((_o = pageFrontmatter.contributors) !== null && _o !== void 0 ? _o : []),
            ...((_p = projectFrontmatter.contributors) !== null && _p !== void 0 ? _p : []),
        ];
        const peopleLookup = {};
        people.forEach((auth) => {
            if (!auth.id || isStashPlaceholder(auth))
                return;
            if (!peopleLookup[auth.id]) {
                peopleLookup[auth.id] = auth;
            }
            else if (normalizeJsonToString(auth) !== normalizeJsonToString(peopleLookup[auth.id])) {
                validationWarning(`Duplicate contributor id within project: ${auth.id}`, incrementOptions('authors', opts));
            }
        });
        if ((_q = frontmatter.authors) === null || _q === void 0 ? void 0 : _q.length) {
            frontmatter.authors = frontmatter.authors.map((auth) => {
                var _a;
                if (!auth.id)
                    return auth;
                // If contributors are in final author list, do not add to contributor list
                contributorIds.delete(auth.id);
                return (_a = peopleLookup[auth.id]) !== null && _a !== void 0 ? _a : stashPlaceholder(auth.id);
            });
        }
        if (contributorIds.size) {
            frontmatter.contributors = [...contributorIds].map((id) => {
                var _a;
                return (_a = peopleLookup[id]) !== null && _a !== void 0 ? _a : stashPlaceholder(id);
            });
        }
    }
    // Add affiliations from reconstructed author/contributor lists and explicit page affiliations
    [...((_r = frontmatter.authors) !== null && _r !== void 0 ? _r : []), ...((_s = frontmatter.contributors) !== null && _s !== void 0 ? _s : [])].forEach((auth) => {
        var _a;
        (_a = auth.affiliations) === null || _a === void 0 ? void 0 : _a.forEach((aff) => {
            affiliationIds.add(aff);
        });
    });
    (_t = frontmatter.affiliations) === null || _t === void 0 ? void 0 : _t.forEach((aff) => {
        if (aff.id)
            affiliationIds.add(aff.id);
    });
    if (affiliationIds.size) {
        const affiliations = [
            ...((_u = pageFrontmatter.affiliations) !== null && _u !== void 0 ? _u : []),
            ...((_v = projectFrontmatter.affiliations) !== null && _v !== void 0 ? _v : []),
        ];
        const affiliationLookup = {};
        affiliations.forEach((aff) => {
            if (!aff.id || isStashPlaceholder(aff))
                return;
            if (!affiliationLookup[aff.id]) {
                affiliationLookup[aff.id] = aff;
            }
            else if (normalizeJsonToString(aff) !== normalizeJsonToString(affiliationLookup[aff.id])) {
                validationWarning(`Duplicate affiliation id within project: ${aff.id}`, incrementOptions('affiliations', opts));
            }
        });
        frontmatter.affiliations = [...affiliationIds].map((id) => {
            var _a;
            return (_a = affiliationLookup[id]) !== null && _a !== void 0 ? _a : stashPlaceholder(id);
        });
    }
    return frontmatter;
}
