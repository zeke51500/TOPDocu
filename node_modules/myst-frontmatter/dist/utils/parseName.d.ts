import type { Name } from '../contributors/types.js';
/**
 * Check if the first letter in a word is uppercase
 *
 * Non-letters are bypassed; if the entire word is non-letters it is considered uppercase
 */
export declare function startsWithUpperCase(word: string): boolean;
/**
 * Parse string literal name to family, dropping-particle, non-dropping-particle, given, and suffix parts
 *
 * This function attempts to follow bibtex rules described here:
 * http://maverick.inria.fr/~Xavier.Decoret/resources/xdkbibtex/bibtex_summary.html#names
 * However, unlike the description in the site above, for input, we only expect simple
 * unicode string names, no latex.
 *
 * We also take some inspiration from https://github.com/citation-js/name
 * particularly around non-dropping vs. dropping particles.
 * However, that library is very under-tested, and some of the behavior around parsing commas
 * and formatting particles feels wrong.
 */
export declare function parseName(literal: string): Name;
/**
 * Render parsed name to a string
 *
 * If parsed name has literal value, this value is always returned.
 *
 * If alwaysReverse is not set to true, we try to format the name as "Given non-dropping-particle Family"
 * However, it must roundtrip successfully and parse to equal the input.
 *
 * Otherwise, it is rendered as "non-dropping-particle Family, Suffix, Given dropping-particle"
 */
export declare function formatName(name: Name, alwaysReversed?: boolean): string;
//# sourceMappingURL=parseName.d.ts.map