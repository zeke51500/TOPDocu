import { Command } from 'commander';
import { clirun, getSession } from 'myst-cli-utils';
import chalk from 'chalk';
import fetch from 'node-fetch';
import { orcid, ORCID_URL } from '../index.js';
async function fetchAuthor(session, id) {
    const url = id.replace('https://openalex.org', 'https://api.openalex.org');
    session.log.debug(`Fetching information from ${url}`);
    const resp = await fetch(url);
    const data = (await resp.json());
    return data;
}
export async function checkTemplate(session, name) {
    const url = `https://api.openalex.org/autocomplete/authors?q=${name}`;
    session.log.debug(`Fetching query from ${url}`);
    const resp = await fetch(url);
    const data = (await resp.json());
    session.log.debug(JSON.stringify(data, null, 2));
    const relevant = data.results.filter(({ external_id }) => external_id === null || external_id === void 0 ? void 0 : external_id.includes(ORCID_URL));
    if (relevant.length === 0) {
        session.log.warn(`Did not find any results for query "${name}".`);
        return;
    }
    const authors = await Promise.all(relevant.map(async (r) => {
        const author = await fetchAuthor(session, r.id);
        return { author, query: r };
    }));
    session.log.info(chalk.dim(`Found ${authors.length} result${authors.length > 1 ? 's' : ''} for "${name}" with an ORCID:\n`));
    authors.forEach((result) => {
        var _a, _b;
        session.log.info(`${chalk.green.bold(result.author.display_name)}`);
        session.log.info(`${chalk.blue.bold(orcid.normalize(result.author.orcid))}`);
        session.log.info(`  Hint: ${chalk.dim(result.query.hint)}`);
        session.log.info(`  Last Institution: ${chalk.dim((_b = (_a = result.author.last_known_institution) === null || _a === void 0 ? void 0 : _a.display_name) !== null && _b !== void 0 ? _b : 'Unknown')}`);
        session.log.info(`  Concepts: ${chalk.dim(result.author.x_concepts
            .map((c) => c.display_name)
            .slice(0, 10)
            .join(', '))}`);
    });
}
function makeSearchCLI(program) {
    const command = new Command('search')
        .description('Check that a template passes validation')
        .argument('<name>', 'Path to the template directory')
        .action(clirun(checkTemplate, { program, getSession }));
    return command;
}
export function addSearchCLI(program) {
    program.addCommand(makeSearchCLI(program));
}
