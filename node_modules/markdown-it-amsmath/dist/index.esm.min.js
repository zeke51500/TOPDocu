function e(e,n){e.block.ruler.before("blockquote","amsmath",t,{alt:["paragraph","reference","blockquote","list","footnote_def"]});const r=null==n?void 0:n.renderer;e.renderer.rules.amsmath=r?(n,t)=>{const a=n[t].content;let i;try{i=r(a)}catch(n){i=e.utils.escapeHtml(`${a}:${n.message}`)}return i}:(n,t)=>`<div class="math amsmath">\n${e.utils.escapeHtml(n[t].content)}\n</div>\n`}const n=new RegExp(`^\\\\begin{(${["equation","multline","gather","align","alignat","flalign","matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","eqnarray"].join("|")})([*]?)}`);function t(e,t,r,a){if(e.sCount[t]-e.blkIndent>=4)return!1;const i=e.bMarks[t]+e.tShift[t],o=function(e){const t=e.match(n);if(!t)return null;const[,r,a]=t,i=`\\end{${r}${a}}`,o=e.indexOf(i);return-1===o?null:{environment:r,numbered:a,endpos:o+i.length}}(e.src.slice(i));if(!o)return!1;const{environment:l,numbered:s}=o;let{endpos:c}=o;c+=i;let m=t;for(;m<r;){if(c>=e.bMarks[m]&&c<=e.eMarks[m]){e.line=m+1;break}m+=1}if(!a){const n=e.push("amsmath","math",0);n.block=!0,n.content=e.src.slice(i,c),n.meta={environment:l,numbered:s},n.map=[t,m]}return!0}export{e as amsmathPlugin,e as default};
//# sourceMappingURL=index.esm.min.js.map
