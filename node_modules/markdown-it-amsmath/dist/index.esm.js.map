{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type MarkdownIt from \"markdown-it/lib/index.js\"\nimport type StateBlock from \"markdown-it/lib/rules_block/state_block.js\"\n\nexport interface IOptions {\n  // the render function to use\n  renderer?: (content: string) => string\n}\n\n/**\n * An markdown-it plugin that parses bare LaTeX [amsmath](https://ctan.org/pkg/amsmath) environments.\n *\n * ```latex\n * \\begin{gather*}\n *   a_1=b_1+c_1\\\\\n *   a_2=b_2+c_2-d_2+e_2\n * \\end{gather*}\n * ```\n *\n */\nexport function amsmathPlugin(md: MarkdownIt, options?: IOptions): void {\n  md.block.ruler.before(\"blockquote\", \"amsmath\", amsmathBlock, {\n    alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\", \"footnote_def\"]\n  })\n\n  const renderer = options?.renderer\n\n  if (renderer) {\n    md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n      const content = tokens[idx].content\n      let res: string\n      try {\n        res = renderer(content)\n      } catch (err) {\n        res = md.utils.escapeHtml(`${content}:${(err as Error).message}`)\n      }\n      return res\n    }\n  } else {\n    // basic renderer for testing\n    md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n      const content = md.utils.escapeHtml(tokens[idx].content)\n      return `<div class=\"math amsmath\">\\n${content}\\n</div>\\n`\n    }\n  }\n}\n\n// Exporting both a default and named export is necessary for Jest in some cases\nexport default amsmathPlugin\n\n// Taken from amsmath version 2.1\n// http://anorien.csc.warwick.ac.uk/mirrors/CTAN/macros/latex/required/amsmath/amsldoc.pdf\nconst ENVIRONMENTS = [\n  // 3.2 single equation with an automatically generated number\n  \"equation\",\n  // 3.3 variation equation, used for equations that don’t fit on a single line\n  \"multline\",\n  // 3.5 a group of consecutive equations when there is no alignment desired among them\n  \"gather\",\n  // 3.6 Used for two or more equations when vertical alignment is desired\n  \"align\",\n  // allows the horizontal space between equations to be explicitly specified.\n  \"alignat\",\n  // stretches the space between the equation columns to the maximum possible width\n  \"flalign\",\n  // 4.1 The pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix have (respectively)\n  // (),[],{},||,and ‖‖ delimiters built in.\n  \"matrix\",\n  \"pmatrix\",\n  \"bmatrix\",\n  \"Bmatrix\",\n  \"vmatrix\",\n  \"Vmatrix\",\n  // eqnarray is another math environment, it is not part of amsmath,\n  // and note that it is better to use align or equation+split instead\n  \"eqnarray\"\n]\n// other \"non-top-level\" environments:\n\n// 3.4 the split environment is for single equations that are too long to fit on one line\n// and hence must be split into multiple lines,\n// it is intended for use only inside some other displayed equation structure,\n// usually an equation, align, or gather environment\n\n// 3.7 variants gathered, aligned,and alignedat are provided\n// whose total width is the actual width of the contents;\n// thus they can be used as a component in a containing expression\n\nconst RE_OPEN = new RegExp(`^\\\\\\\\begin{(${ENVIRONMENTS.join(\"|\")})([*]?)}`)\n\nfunction matchEnvironment(string: string) {\n  const matchOpen = string.match(RE_OPEN)\n  if (!matchOpen) return null\n  const [, environment, numbered] = matchOpen\n  const end = `\\\\end{${environment}${numbered}}`\n  const matchClose = string.indexOf(end)\n  if (matchClose === -1) return null\n  return { environment, numbered, endpos: matchClose + end.length }\n}\n\nfunction amsmathBlock(\n  state: StateBlock,\n  startLine: number,\n  endLine: number,\n  silent: boolean\n) {\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) return false\n\n  const begin = state.bMarks[startLine] + state.tShift[startLine]\n\n  const outcome = matchEnvironment(state.src.slice(begin))\n  if (!outcome) return false\n  const { environment, numbered } = outcome\n  let { endpos } = outcome\n  endpos += begin\n\n  let line = startLine\n  while (line < endLine) {\n    if (endpos >= state.bMarks[line] && endpos <= state.eMarks[line]) {\n      // line for end of block math found ...\n      // eslint-disable-next-line no-param-reassign\n      state.line = line + 1\n      break\n    }\n    line += 1\n  }\n\n  if (!silent) {\n    const token = state.push(\"amsmath\", \"math\", 0)\n    token.block = true\n    token.content = state.src.slice(begin, endpos)\n    token.meta = { environment, numbered }\n    token.map = [startLine, line]\n  }\n\n  return true\n}\n"],"names":[],"mappings":"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"}