{"version":3,"file":"index.esm.min.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type MarkdownIt from \"markdown-it/lib/index.js\"\nimport type StateBlock from \"markdown-it/lib/rules_block/state_block.js\"\n\nexport interface IOptions {\n  // the render function to use\n  renderer?: (content: string) => string\n}\n\n/**\n * An markdown-it plugin that parses bare LaTeX [amsmath](https://ctan.org/pkg/amsmath) environments.\n *\n * ```latex\n * \\begin{gather*}\n *   a_1=b_1+c_1\\\\\n *   a_2=b_2+c_2-d_2+e_2\n * \\end{gather*}\n * ```\n *\n */\nexport function amsmathPlugin(md: MarkdownIt, options?: IOptions): void {\n  md.block.ruler.before(\"blockquote\", \"amsmath\", amsmathBlock, {\n    alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\", \"footnote_def\"]\n  })\n\n  const renderer = options?.renderer\n\n  if (renderer) {\n    md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n      const content = tokens[idx].content\n      let res: string\n      try {\n        res = renderer(content)\n      } catch (err) {\n        res = md.utils.escapeHtml(`${content}:${(err as Error).message}`)\n      }\n      return res\n    }\n  } else {\n    // basic renderer for testing\n    md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n      const content = md.utils.escapeHtml(tokens[idx].content)\n      return `<div class=\"math amsmath\">\\n${content}\\n</div>\\n`\n    }\n  }\n}\n\n// Exporting both a default and named export is necessary for Jest in some cases\nexport default amsmathPlugin\n\n// Taken from amsmath version 2.1\n// http://anorien.csc.warwick.ac.uk/mirrors/CTAN/macros/latex/required/amsmath/amsldoc.pdf\nconst ENVIRONMENTS = [\n  // 3.2 single equation with an automatically generated number\n  \"equation\",\n  // 3.3 variation equation, used for equations that don’t fit on a single line\n  \"multline\",\n  // 3.5 a group of consecutive equations when there is no alignment desired among them\n  \"gather\",\n  // 3.6 Used for two or more equations when vertical alignment is desired\n  \"align\",\n  // allows the horizontal space between equations to be explicitly specified.\n  \"alignat\",\n  // stretches the space between the equation columns to the maximum possible width\n  \"flalign\",\n  // 4.1 The pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix have (respectively)\n  // (),[],{},||,and ‖‖ delimiters built in.\n  \"matrix\",\n  \"pmatrix\",\n  \"bmatrix\",\n  \"Bmatrix\",\n  \"vmatrix\",\n  \"Vmatrix\",\n  // eqnarray is another math environment, it is not part of amsmath,\n  // and note that it is better to use align or equation+split instead\n  \"eqnarray\"\n]\n// other \"non-top-level\" environments:\n\n// 3.4 the split environment is for single equations that are too long to fit on one line\n// and hence must be split into multiple lines,\n// it is intended for use only inside some other displayed equation structure,\n// usually an equation, align, or gather environment\n\n// 3.7 variants gathered, aligned,and alignedat are provided\n// whose total width is the actual width of the contents;\n// thus they can be used as a component in a containing expression\n\nconst RE_OPEN = new RegExp(`^\\\\\\\\begin{(${ENVIRONMENTS.join(\"|\")})([*]?)}`)\n\nfunction matchEnvironment(string: string) {\n  const matchOpen = string.match(RE_OPEN)\n  if (!matchOpen) return null\n  const [, environment, numbered] = matchOpen\n  const end = `\\\\end{${environment}${numbered}}`\n  const matchClose = string.indexOf(end)\n  if (matchClose === -1) return null\n  return { environment, numbered, endpos: matchClose + end.length }\n}\n\nfunction amsmathBlock(\n  state: StateBlock,\n  startLine: number,\n  endLine: number,\n  silent: boolean\n) {\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) return false\n\n  const begin = state.bMarks[startLine] + state.tShift[startLine]\n\n  const outcome = matchEnvironment(state.src.slice(begin))\n  if (!outcome) return false\n  const { environment, numbered } = outcome\n  let { endpos } = outcome\n  endpos += begin\n\n  let line = startLine\n  while (line < endLine) {\n    if (endpos >= state.bMarks[line] && endpos <= state.eMarks[line]) {\n      // line for end of block math found ...\n      // eslint-disable-next-line no-param-reassign\n      state.line = line + 1\n      break\n    }\n    line += 1\n  }\n\n  if (!silent) {\n    const token = state.push(\"amsmath\", \"math\", 0)\n    token.block = true\n    token.content = state.src.slice(begin, endpos)\n    token.meta = { environment, numbered }\n    token.map = [startLine, line]\n  }\n\n  return true\n}\n"],"names":["amsmathPlugin","md","options","block","ruler","before","amsmathBlock","alt","renderer","rules","tokens","idx","content","res","err","utils","escapeHtml","message","RE_OPEN","RegExp","join","state","startLine","endLine","silent","sCount","blkIndent","begin","bMarks","tShift","outcome","string","matchOpen","match","environment","numbered","end","matchClose","indexOf","endpos","length","matchEnvironment","src","slice","line","eMarks","token","push","meta","map"],"mappings":"AAoBgB,SAAAA,EAAcC,EAAgBC,GAC5CD,EAAGE,MAAMC,MAAMC,OAAO,aAAc,UAAWC,EAAc,CAC3DC,IAAK,CAAC,YAAa,YAAa,aAAc,OAAQ,kBAGxD,MAAMC,EAAWN,aAAA,EAAAA,EAASM,SAGxBP,EAAGO,SAASC,MAAe,QADzBD,EAC6B,CAACE,EAAQC,KACtC,MAAMC,EAAUF,EAAOC,GAAKC,QAC5B,IAAIC,EACJ,IACEA,EAAML,EAASI,EAChB,CAAC,MAAOE,GACPD,EAAMZ,EAAGc,MAAMC,WAAW,GAAGJ,KAAYE,EAAcG,UACxD,CACD,OAAOJ,CAAG,EAImB,CAACH,EAAQC,IAE/B,+BADSV,EAAGc,MAAMC,WAAWN,EAAOC,GAAKC,oBAItD,CAOA,MAoCMM,EAAU,IAAIC,OAAO,eApCN,CAEnB,WAEA,WAEA,SAEA,QAEA,UAEA,UAGA,SACA,UACA,UACA,UACA,UACA,UAGA,YAaqDC,KAAK,gBAY5D,SAASd,EACPe,EACAC,EACAC,EACAC,GAGA,GAAIH,EAAMI,OAAOH,GAAaD,EAAMK,WAAa,EAAG,OAAO,EAE3D,MAAMC,EAAQN,EAAMO,OAAON,GAAaD,EAAMQ,OAAOP,GAE/CQ,EArBR,SAA0BC,GACxB,MAAMC,EAAYD,EAAOE,MAAMf,GAC/B,IAAKc,EAAW,OAAO,KACvB,OAASE,EAAaC,GAAYH,EAC5BI,EAAM,SAASF,IAAcC,KAC7BE,EAAaN,EAAOO,QAAQF,GAClC,OAAoB,IAAhBC,EAA0B,KACvB,CAAEH,cAAaC,WAAUI,OAAQF,EAAaD,EAAII,OAC3D,CAakBC,CAAiBpB,EAAMqB,IAAIC,MAAMhB,IACjD,IAAKG,EAAS,OAAO,EACrB,MAAMI,YAAEA,EAAWC,SAAEA,GAAaL,EAClC,IAAIS,OAAEA,GAAWT,EACjBS,GAAUZ,EAEV,IAAIiB,EAAOtB,EACX,KAAOsB,EAAOrB,GAAS,CACrB,GAAIgB,GAAUlB,EAAMO,OAAOgB,IAASL,GAAUlB,EAAMwB,OAAOD,GAAO,CAGhEvB,EAAMuB,KAAOA,EAAO,EACpB,KACD,CACDA,GAAQ,CACT,CAED,IAAKpB,EAAQ,CACX,MAAMsB,EAAQzB,EAAM0B,KAAK,UAAW,OAAQ,GAC5CD,EAAM3C,OAAQ,EACd2C,EAAMlC,QAAUS,EAAMqB,IAAIC,MAAMhB,EAAOY,GACvCO,EAAME,KAAO,CAAEd,cAAaC,YAC5BW,EAAMG,IAAM,CAAC3B,EAAWsB,EACzB,CAED,OAAO,CACT"}