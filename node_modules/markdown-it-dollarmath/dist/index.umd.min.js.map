{"version":3,"file":"index.umd.min.js","sources":["../node_modules/markdown-it/lib/common/entities.js","../node_modules/uc.micro/categories/P/regex.js","../node_modules/mdurl/encode.js","../node_modules/mdurl/decode.js","../node_modules/mdurl/parse.js","../node_modules/mdurl/index.js","../node_modules/mdurl/format.js","../node_modules/uc.micro/index.js","../node_modules/uc.micro/properties/Any/regex.js","../node_modules/uc.micro/categories/Cc/regex.js","../node_modules/uc.micro/categories/Cf/regex.js","../node_modules/uc.micro/categories/Z/regex.js","../node_modules/markdown-it/lib/common/utils.js","../src/index.ts"],"sourcesContent":["// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type MarkdownIt from \"markdown-it/lib/index.js\"\nimport { escapeHtml } from \"markdown-it/lib/common/utils.js\"\nimport type Renderer from \"markdown-it/lib/renderer.js\"\nimport type StateBlock from \"markdown-it/lib/rules_block/state_block.js\"\nimport type StateInline from \"markdown-it/lib/rules_inline/state_inline.js\"\n\nexport interface IRenderOptions {\n  displayMode: boolean\n}\n\nexport interface IOptions {\n  /** Parse inline math when there is space after/before the opening/closing `$`, e.g. `$ a $` */\n  allow_space?: boolean\n  /** Parse inline math when there is a digit before/after the opening/closing `$`, e.g. `1$` or `$2` */\n  allow_digits?: boolean\n  /** Search for double-dollar math within inline contexts */\n  double_inline?: boolean\n  /** Capture math blocks with label suffix, e.g. `$$a=1$$ (eq1)` */\n  allow_labels?: boolean\n  /** function to normalize the label, by default replaces whitespace with `-` */\n  labelNormalizer?: (label: string) => string\n  /** The render function for math content */\n  renderer?: (content: string, options: IRenderOptions) => string\n  /** The render function for label content */\n  labelRenderer?: (label: string) => string\n}\n\nconst OptionDefaults: Required<IOptions> = {\n  allow_space: true,\n  allow_digits: true,\n  double_inline: true,\n  allow_labels: true,\n  labelNormalizer(label) {\n    return label.replace(/[\\s]+/g, \"-\")\n  },\n  renderer(content) {\n    return escapeHtml(content)\n  },\n  labelRenderer(label) {\n    return `<a href=\"#${label}\" class=\"mathlabel\" title=\"Permalink to this equation\">¶</a>`\n  }\n}\n\n/**\n * A markdown-it plugin for parsing dollar delimited math,\n * e.g. inline: ``$a=1$``, block: ``$$b=2$$`\n */\nexport function dollarmathPlugin(md: MarkdownIt, options?: IOptions): void {\n  const fullOptions = { ...OptionDefaults, ...options }\n  md.inline.ruler.before(\"escape\", \"math_inline\", math_inline_dollar(fullOptions))\n  md.block.ruler.before(\"fence\", \"math_block\", math_block_dollar(fullOptions))\n\n  const createRule =\n    (\n      opts: IRenderOptions & { inline?: boolean; hasLabel?: boolean }\n    ): Renderer.RenderRule =>\n    (tokens, idx) => {\n      const content = tokens[idx].content.trim()\n      let res: string\n      try {\n        res = fullOptions.renderer(content, { displayMode: opts.displayMode })\n      } catch (err) {\n        res = md.utils.escapeHtml(`${content}:${(err as Error).message}`)\n      }\n      const className = opts.inline ? \"inline\" : \"block\"\n      const tag = opts.displayMode ? \"div\" : \"span\"\n      const newline = opts.inline ? \"\" : \"\\n\"\n      const id = tokens[idx].info\n      const label = opts.hasLabel ? `${fullOptions.labelRenderer(id)}` : \"\"\n      return (\n        [\n          `<${tag} ${id ? `id=\"${id}\" ` : \"\"}class=\"math ${className}\">`,\n          label,\n          res,\n          `</${tag}>`\n        ]\n          .filter(v => !!v)\n          .join(newline) + newline\n      )\n    }\n\n  md.renderer.rules[\"math_inline\"] = createRule({\n    displayMode: false,\n    inline: true\n  })\n  md.renderer.rules[\"math_inline_double\"] = createRule({\n    displayMode: true,\n    inline: true\n  })\n  md.renderer.rules[\"math_block\"] = createRule({\n    displayMode: true\n  })\n  md.renderer.rules[\"math_block_label\"] = createRule({\n    displayMode: true,\n    hasLabel: true\n  })\n}\n\n// Exporting both a default and named export is necessary for Jest in some cases\nexport default dollarmathPlugin\n\n/** Test if dollar is escaped */\nfunction isEscaped(state: StateInline, back_pos: number, mod = 0): boolean {\n  // count how many backslashes are before the current position\n  let backslashes = 0\n\n  while (back_pos >= 0) {\n    back_pos = back_pos - 1\n    if (state.src.charCodeAt(back_pos) === 0x5c) {\n      backslashes += 1\n    } else {\n      break\n    }\n  }\n\n  if (backslashes === 0) {\n    return false\n  }\n\n  // if an odd number of backslashes then ignore\n  if (backslashes % 2 !== mod) {\n    return true\n  }\n\n  return false\n}\n\n/** Generate inline dollar rule  */\nfunction math_inline_dollar(\n  options: IOptions\n): (state: StateInline, silent: boolean) => boolean {\n  /** Inline dollar rule:\n   *\n    - Initial check:\n        - check if first character is a $\n        - check if the first character is escaped\n        - check if the next character is a space (if not allow_space)\n        - check if the next character is a digit (if not allow_digits)\n    - Advance one, if allow_double\n    - Find closing (advance one, if allow_double)\n    - Check closing:\n        - check if the previous character is a space (if not allow_space)\n        - check if the next character is a digit (if not allow_digits)\n    - Check empty content\n   *\n  */\n  function math_inline_dollar_rule(state: StateInline, silent: boolean): boolean {\n    if (state.src.charCodeAt(state.pos) !== 0x24 /* $ */) {\n      return false\n    }\n    if (!options.allow_space) {\n      // whitespace not allowed straight after opening $\n      if (state.md.utils.isWhiteSpace(state.src.charCodeAt(state.pos + 1))) {\n        return false\n      }\n    }\n    if (!options.allow_digits) {\n      // digit not allowed straight before opening $\n      const char = state.src.charAt(state.pos - 1)\n      if (!!char && char.trim() !== \"\" && !isNaN(Number(char))) {\n        return false\n      }\n    }\n    if (isEscaped(state, state.pos)) {\n      return false\n    }\n    // check if double dollar (if allowed)\n    let is_double = false\n    if (options.double_inline && state.src.charCodeAt(state.pos + 1) === 0x24) {\n      is_double = true\n    }\n    // find closing $\n    let pos = state.pos + 1 + (is_double ? 1 : 0)\n    let found_closing = false\n    let end = -1\n    while (!found_closing) {\n      end = state.src.indexOf(\"$\", pos)\n      if (end === -1) {\n        return false\n      }\n      if (isEscaped(state, end)) {\n        pos = end + 1\n        continue\n      }\n      if (is_double && state.src.charCodeAt(end + 1) !== 0x24) {\n        pos = end + 1\n        continue\n      }\n      if (is_double) {\n        end += 1\n      }\n      found_closing = true\n    }\n    if (!found_closing) {\n      return false\n    }\n    if (!options.allow_space) {\n      // whitespace not allowed straight before closing $\n      const charCode = state.src.charCodeAt(end - 1)\n      if (state.md.utils.isWhiteSpace(charCode)) {\n        return false\n      }\n    }\n    if (!options.allow_digits) {\n      // digit not allowed straight after closing $\n      const char = state.src.charAt(end + 1)\n      if (!!char && char.trim() !== \"\" && !isNaN(Number(char))) {\n        return false\n      }\n    }\n    let text = state.src.slice(state.pos + 1, end)\n    if (is_double) {\n      text = state.src.slice(state.pos + 2, end - 1)\n    }\n    if (!text) {\n      // ignore empty\n      return false\n    }\n    if (!silent) {\n      const token = state.push(\n        is_double ? \"math_inline_double\" : \"math_inline\",\n        \"math\",\n        0\n      )\n      token.content = text\n      token.markup = is_double ? \"$$\" : \"$\"\n    }\n    state.pos = end + 1\n    return true\n  }\n  return math_inline_dollar_rule\n}\n\n/** Match a trailing label for a math block */\nfunction matchLabel(lineText: string, end: number): { label?: string; end: number } {\n  // reverse the line and match\n  const eqnoMatch = lineText\n    .split(\"\")\n    .reverse()\n    .join(\"\")\n    .match(/^\\s*\\)(?<label>[^)$\\r\\n]+?)\\(\\s*\\${2}/)\n  if (eqnoMatch && eqnoMatch.groups) {\n    const label = eqnoMatch.groups[\"label\"].split(\"\").reverse().join(\"\")\n    end = end - ((eqnoMatch.index || 0) + eqnoMatch[0].length)\n    return { label, end }\n  }\n  return { end }\n}\n\n/** Generate inline dollar rule */\nfunction math_block_dollar(\n  options: IOptions\n): (state: StateBlock, startLine: number, endLine: number, silent: boolean) => boolean {\n  /** Block dollar rule */\n  function math_block_dollar_rule(\n    state: StateBlock,\n    startLine: number,\n    endLine: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    silent: boolean\n  ): boolean {\n    let haveEndMarker = false\n    const startPos = state.bMarks[startLine] + state.tShift[startLine]\n    let end = state.eMarks[startLine]\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n      return false\n    }\n    if (startPos + 2 > end) {\n      return false\n    }\n    if (\n      state.src.charCodeAt(startPos) != 0x24 ||\n      state.src.charCodeAt(startPos + 1) != 0x24\n    ) {\n      return false\n    }\n    // search for end of block\n    let nextLine = startLine\n    let label: undefined | string = undefined\n    // search for end of block on same line\n    let lineText = state.src.slice(startPos, end)\n    if (lineText.trim().length > 3) {\n      if (lineText.trim().endsWith(\"$$\")) {\n        haveEndMarker = true\n        end = end - 2 - (lineText.length - lineText.trim().length)\n      } else if (options.allow_labels) {\n        const output = matchLabel(lineText, end)\n        if (output.label !== undefined) {\n          haveEndMarker = true\n          label = output.label\n          end = output.end\n        }\n      }\n    }\n\n    // search for end of block on subsequent line\n    let start: number\n    if (!haveEndMarker) {\n      while (nextLine + 1 < endLine) {\n        nextLine += 1\n        start = state.bMarks[nextLine] + state.tShift[nextLine]\n        end = state.eMarks[nextLine]\n        lineText = state.src.slice(start, end)\n        if (lineText.trim().endsWith(\"$$\")) {\n          haveEndMarker = true\n          end = end - 2 - (lineText.length - lineText.trim().length)\n          break\n        }\n        if (lineText.trim() == \"\") {\n          break // blank lines are not allowed within $$\n        }\n        if (options.allow_labels) {\n          const output = matchLabel(lineText, end)\n          if (output.label !== undefined) {\n            haveEndMarker = true\n            label = output.label\n            end = output.end\n            break\n          }\n        }\n      }\n    }\n    if (!haveEndMarker) {\n      return false\n    }\n\n    state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n    const token = state.push(label ? \"math_block_label\" : \"math_block\", \"math\", 0)\n    token.block = true\n    token.content = state.src.slice(startPos + 2, end).trim()\n    token.markup = \"$$\"\n    token.map = [startLine, state.line]\n    if (label) {\n      token.info = options.labelNormalizer ? options.labelNormalizer(label) : label\n    }\n    return true\n  }\n  return math_block_dollar_rule\n}\n"],"names":["entities","regex","encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","encode_1","decodeCache","decode","getDecodeCache","replace","seq","b1","b2","b3","b4","chr","parseInt","decode_1","Url","this","protocol","slashes","auth","port","hostname","hash","search","pathname","protocolPattern","portPattern","simplePathPattern","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","slashedProtocol","http","https","ftp","gopher","file","prototype","parse","url","slashesDenoteHost","lowerProto","hec","rest","trim","split","simplePath","exec","proto","toLowerCase","substr","match","atSign","hostEnd","indexOf","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","validParts","notHost","bit","unshift","join","qm","u","mdurl","require$$0","require$$1","format","require$$3","uc_micro","Any","Cc","Cf","P","Z","_hasOwnProperty","Object","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","require$$2","ucmicro","assign","obj","Array","arguments","forEach","TypeError","keys","isString","_class","unescapeMd","str","unescapeAll","escaped","entity","name","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","OptionDefaults","allow_space","allow_digits","double_inline","allow_labels","labelNormalizer","label","renderer","content","labelRenderer","dollarmathPlugin","md","options","fullOptions","inline","ruler","before","math_inline_dollar_rule","state","silent","utils","char","charAt","isNaN","Number","isEscaped","is_double","found_closing","end","charCode","text","token","markup","math_inline_dollar","block","math_block_dollar_rule","startLine","endLine","haveEndMarker","startPos","bMarks","tShift","eMarks","sCount","blkIndent","start","nextLine","lineText","endsWith","output","matchLabel","undefined","line","map","info","math_block_dollar","createRule","opts","tokens","idx","res","displayMode","err","message","className","tag","newline","id","hasLabel","filter","v","rules","back_pos","mod","backslashes","eqnoMatch","reverse","groups","index"],"mappings":"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"}