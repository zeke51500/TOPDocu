import { normalizeLabel } from 'myst-common';
export const citeRole = {
    name: 'cite',
    alias: [
        'cite:p',
        'cite:t',
        // https://sphinxcontrib-bibtex.readthedocs.io/en/latest/usage.html
        'cite:ps',
        'cite:ts',
        'cite:ct',
        'cite:cts',
        'cite:alp',
        'cite:alps',
        'cite:label',
        'cite:labelpar',
        'cite:year',
        'cite:yearpar',
        'cite:author',
        'cite:authors',
        'cite:authorpar',
        'cite:authorpars',
        'cite:cauthor',
        'cite:cauthors',
        // 'cite:empty',
    ],
    body: {
        type: String,
        required: true,
    },
    run(data) {
        const content = data.body;
        const labels = content.split(/[,;]/).map((s) => s.trim());
        const kind = data.name.startsWith('cite:p') || data.name.includes('par') ? 'parenthetical' : 'narrative';
        const children = labels.map((c) => {
            var _a, _b;
            // {cite:p}`{see}1977:nelson{p. 1166}`
            const groups = /^(?:\{([^{]*)\})?([^{]*)(?:\{([^{]*)\})?$/;
            const [, prefix, l, suffix] = (_a = c.match(groups)) !== null && _a !== void 0 ? _a : ['', '', c];
            const { label, identifier } = (_b = normalizeLabel(l)) !== null && _b !== void 0 ? _b : {};
            const cite = {
                type: 'cite',
                kind,
                label: label !== null && label !== void 0 ? label : l,
                identifier,
            };
            if (data.name.startsWith('cite:year')) {
                cite.partial = 'year';
            }
            if (data.name.startsWith('cite:author') || data.name.startsWith('cite:cauthor')) {
                cite.partial = 'author';
            }
            if (prefix)
                cite.prefix = prefix.trim();
            if (suffix)
                cite.suffix = suffix.trim();
            return cite;
        });
        if (data.name === 'cite' && children.length === 1) {
            return children;
        }
        return [
            {
                type: 'citeGroup',
                kind,
                children,
            },
        ];
    },
};
