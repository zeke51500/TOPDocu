import { fileError, normalizeLabel, RuleId } from 'myst-common';
export const tableDirective = {
    name: 'table',
    arg: {
        type: 'myst',
    },
    options: {
        label: {
            type: String,
            alias: ['name'],
        },
        class: {
            type: String,
            // class_option: list of strings?
            doc: `CSS classes to add to your table. Special classes include:

- \`full-width\`: changes the table environment to cover two columns in LaTeX`,
        },
        align: {
            type: String,
            // choice(['left', 'center', 'right'])
        },
    },
    body: {
        type: 'myst',
        required: true,
    },
    run(data) {
        var _a, _b;
        const children = [];
        if (data.arg) {
            children.push({
                type: 'caption',
                children: [{ type: 'paragraph', children: data.arg }],
            });
        }
        children.push(...data.body);
        const { label, identifier } = normalizeLabel((_a = data.options) === null || _a === void 0 ? void 0 : _a.label) || {};
        const container = {
            type: 'container',
            kind: 'table',
            identifier,
            label,
            class: (_b = data.options) === null || _b === void 0 ? void 0 : _b.class,
            children,
        };
        return [container];
    },
};
export const listTableDirective = {
    name: 'list-table',
    arg: {
        type: 'myst',
    },
    options: {
        label: {
            type: String,
            alias: ['name'],
        },
        'header-rows': {
            type: Number,
            // nonnegative int
        },
        // 'stub-columns': {
        //   type: Number,
        //   // nonnegative int
        // },
        // width: {
        //   type: String,
        //   // length_or_percentage_or_unitless,
        // },
        // widths: {
        //   type: String,
        //   // TODO use correct widths option validator
        // },
        class: {
            type: String,
            // class_option: list of strings?
            doc: `CSS classes to add to your table. Special classes include:

- \`full-width\`: changes the table environment to cover two columns in LaTeX`,
        },
        align: {
            type: String,
            // choice(['left', 'center', 'right'])
        },
    },
    body: {
        type: 'myst',
        required: true,
    },
    validate(data, vfile) {
        var _a;
        const validatedData = { ...data };
        const parsedBody = data.body;
        if (parsedBody.length !== 1 || parsedBody[0].type !== 'list') {
            fileError(vfile, 'list-table directive must have one list as body', {
                node: data.node,
                ruleId: RuleId.directiveBodyCorrect,
            });
            validatedData.body = [];
        }
        else {
            (_a = parsedBody[0].children) === null || _a === void 0 ? void 0 : _a.forEach((listItem) => {
                var _a, _b;
                if (!validatedData.body.length)
                    return;
                if (listItem.type !== 'listItem' ||
                    ((_a = listItem.children) === null || _a === void 0 ? void 0 : _a.length) !== 1 ||
                    ((_b = listItem.children[0]) === null || _b === void 0 ? void 0 : _b.type) !== 'list') {
                    fileError(vfile, 'list-table directive must have a list of lists', {
                        node: data.node,
                        ruleId: RuleId.directiveBodyCorrect,
                    });
                    validatedData.body = [];
                }
            });
        }
        return validatedData;
    },
    run(data) {
        var _a, _b, _c, _d, _e;
        const children = [];
        if (data.arg) {
            children.push({
                type: 'caption',
                children: [{ type: 'paragraph', children: data.arg }],
            });
        }
        const topListChildren = ((_a = data.body[0]) === null || _a === void 0 ? void 0 : _a.children) || [];
        let headerCount = ((_b = data.options) === null || _b === void 0 ? void 0 : _b['header-rows']) || 0;
        const table = {
            type: 'table',
            align: (_c = data.options) === null || _c === void 0 ? void 0 : _c.align,
            children: topListChildren.map((topListItem) => {
                var _a, _b;
                const nestedListChildren = ((_b = (_a = topListItem.children) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.children) || [];
                const row = {
                    type: 'tableRow',
                    children: nestedListChildren.map((nestedListItem) => {
                        const cell = {
                            type: 'tableCell',
                            header: headerCount > 0 ? true : undefined,
                            children: nestedListItem.children,
                        };
                        return cell;
                    }),
                };
                headerCount -= 1;
                return row;
            }),
        };
        children.push(table);
        const { label, identifier } = normalizeLabel((_d = data.options) === null || _d === void 0 ? void 0 : _d.label) || {};
        const container = {
            type: 'container',
            kind: 'table',
            identifier,
            label,
            class: (_e = data.options) === null || _e === void 0 ? void 0 : _e.class,
            children,
        };
        return [container];
    },
};
