import type { Block } from 'myst-spec-ext';
import type { GenericParent } from './types.js';
/**
 * Selects the block node(s) based on part (string) or tags (string[]).
 * If `part` is a string array, any of the parts will be treated equally.
 */
export declare function selectBlockParts(tree: GenericParent, part: string | string[]): Block[];
/**
 * Returns a copy of the block parts and removes them from the tree.
 */
export declare function extractPart(tree: GenericParent, part: string | string[], opts?: {
    /** Helpful for when we are doing recursions, we don't want to extract the part again. */
    removePartData?: boolean;
    /** Ensure that blocks are by default turned to visible */
    keepVisibility?: boolean;
}): GenericParent | undefined;
//# sourceMappingURL=extractParts.d.ts.map